spring.application.name=EconomicIndicators-java
# ------------------------------------------------------------------------------
# サーバー設定
# ポート番号（デフォルト: 8888）を設定します
 server.port=8888

# ------------------------------------------------------------------------------
# データベース接続設定
# MySQL データベースの URL を指定します
# ポートフォリオ用データベース名（例: portfolio_db）を指定してください
# createDatabaseIfNotExist=true を指定すると、存在しない場合に自動的にデータベースを作成します
spring.datasource.url=jdbc:mysql://mysql-db:3306/portfolio_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
# MySQL データベースのユーザー名を指定します
spring.datasource.username=root
# MySQL データベースのパスワードを指定します
spring.datasource.password=soma123
# MySQL用JDBCドライバクラス名を指定します（例: MySQL Connector/J 8.x）
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ------------------------------------------------------------------------------
# JPA / Hibernate 設定
# Hibernate の DDL 自動生成モードを指定します
# "validate": スキーマ検証のみ
# "update": スキーマを自動更新
# "create": スキーマを再作成
# "create-drop": 起動時に作成、終了時に削除
# "none": DDL 処理を行いません
spring.jpa.hibernate.ddl-auto=validate
# 実行されるSQLをコンソールに出力します
spring.jpa.show-sql=true
# 出力されるSQLをフォーマットします
spring.jpa.properties.hibernate.format_sql=true
# データベースプラットフォームを指定します（MySQL利用時はMySQLDialect）
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# ------------------------------------------------------------------------------
# Flyway 設定
# マイグレーションを有効化します
# マイグレーションスクリプトの配置場所：classpath:db/migration
# create-schemas=true：スキーマが存在しない場合に自動作成します
spring.flyway.enabled=true
# マイグレーションファイル名はバージョン番号と説明をダブルアンダースコアで区切ります（例: V1__create_tables.sql）
spring.flyway.locations=classpath:db/migration
# Flywayが使用するデータベースユーザー名を指定します（省略時はspring.datasource.usernameを使用）
# spring.flyway.user=${spring.datasource.username}
# Flywayが使用するデータベースパスワードを指定します（省略時はspring.datasource.passwordを使用）
# Flyway用の認証情報は spring.datasource.username/password をデフォルトで使用します
# マイグレーション対象のスキーマは接続先データベース (portfolio_db) です
# create-schemas=true: 存在しないスキーマ(データベース) を自動作成します
spring.flyway.create-schemas=true

# ------------------------------------------------------------------------------
# ロギング設定
# Hibernate の SQL ログを DEBUG レベルで出力します
# Hibernate のバインドパラメータをTRACEレベルで出力します
logging.level.org.hibernate.SQL=DEBUG
# Hibernate のバインドパラメータをTRACEレベルで出力します
logging.level.org.hibernate.type.descriptor.sql=TRACE

